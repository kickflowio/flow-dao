parameter (or (or (or (nat %end_voting) (nat %execute_proposal)) (or (pair %get_round_parameters unit (contract (pair (option %donation_handler_address address) (option %round_address address)))) (pair %register_proposal (lambda %proposal_lambda unit (list operation)) (string %proposal_metadata)))) (or (or (nat %register_proposal_callback) (pair %set_main_governance_parameters (pair (nat %proposal_threshold) (nat %quorum_votes)) (pair (int %timelock_period) (int %voting_period)))) (or (pair %set_round_governance_parameters (option %donation_handler_address address) (option %round_address address)) (or (pair %vote (nat %proposal_id) (nat %vote_value)) (nat %vote_callback)))));
storage   (pair (pair (pair (pair %main_governance_parameters (pair (nat %proposal_threshold) (nat %quorum_votes)) (pair (int %timelock_period) (int %voting_period))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (lambda %proposal_lambda unit (list operation)) (pair (string %proposal_metadata) (address %sender)))) (big_map %proposals nat (pair (pair (pair (address %creator) (nat %down_votes)) (pair (nat %origin_level) (pair (lambda %proposal_lambda unit (list operation)) (string %proposal_metadata)))) (pair (pair (pair %proposal_timelock (bool %activated) (timestamp %ending)) (nat %status)) (pair (nat %up_votes) (pair (map %voters address (pair (nat %value) (nat %votes))) (timestamp %voting_end)))))))) (pair (pair (pair %round_governance_parameters (option %donation_handler_address address) (option %round_address address)) (nat %state)) (pair (address %token_address) (pair (nat %uuid) (option %voting_buffer (pair (nat %proposal_id) (pair (address %sender) (nat %vote_value))))))));
code
  {
    CAST (pair (or (or (or nat nat) (or (pair unit (contract (pair (option address) (option address)))) (pair (lambda unit (list operation)) string))) (or (or nat (pair (pair nat nat) (pair int int))) (or (pair (option address) (option address)) (or (pair nat nat) nat)))) (pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))))); # pair (or (or (or nat nat) (or (pair unit (contract (pair (option address) (option address)))) (pair (lambda unit (list operation)) string))) (or (or nat (pair (pair nat nat) (pair int int))) (or (pair (option address) (option address)) (or (pair nat nat) nat)))) (pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))))
    UNPAIR;     # or (or (or nat nat) (or (pair unit (contract (pair (option address) (option address)))) (pair (lambda unit (list operation)) string))) (or (or nat (pair (pair nat nat) (pair int int))) (or (pair (option address) (option address)) (or (pair nat nat) nat))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                # == end_voting ==
                # sp.verify(self.data.proposals.contains(params), 'INVALID_PROPOSAL_ID') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                MEM;        # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "INVALID_PROPOSAL_ID"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                # sp.verify(sp.now > self.data.proposals[params].voting_end, 'VOTING_ONGOING') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    # of_some: Get-item:189 # @some : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH int 189; # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 8;      # timestamp : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NOW;        # @now : timestamp : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GT;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "VOTING_ONGOING"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # sp.verify(self.data.proposals[params].status == 0, 'VOTING_ALREADY_ENDED') # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH nat 0; # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    # of_some: Get-item:189 # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH int 189; # int : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # pair (pair bool timestamp) nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CDR;        # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EQ;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "VOTING_ALREADY_ENDED"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                # if (self.data.proposals[params].up_votes > self.data.proposals[params].down_votes) & ((self.data.proposals[params].up_votes + self.data.proposals[params].down_votes) >= self.data.main_governance_parameters.quorum_votes): # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    # of_some: Get-item:189 # @some : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH int 189; # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair address nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CDR;        # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    # of_some: Get-item:189 # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH int 189; # int : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 5;      # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GT;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    CAR;        # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    CAR;        # pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    CAR;        # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    CDR;        # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat
                    DUG 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 3;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {
                        # of_some: Get-item:189 # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        PUSH int 189; # int : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair address nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CDR;        # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 4;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 4;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {
                        # of_some: Get-item:189 # @some : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        PUSH int 189; # int : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 5;      # nat : nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    ADD;        # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GE;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH bool False; # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }; # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    # self.data.proposals[params].proposal_timelock.activated = True # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DUP 6;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    IF_SOME
                      {}
                      {
                        PUSH int 202; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UNPAIR;     # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UNPAIR;     # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UNPAIR;     # pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PUSH bool True; # bool : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UPDATE 1;   # pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    # self.data.proposals[params].proposal_timelock.ending = sp.add_seconds(sp.now, self.data.main_governance_parameters.timelock_period) # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 6;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {}
                      {
                        PUSH int 203; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    NOW;        # @now : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DIG 11;     # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : @now : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : @now : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    CAR;        # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : @now : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    CAR;        # pair (pair nat nat) (pair int int) : @now : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    GET 3;      # int : @now : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    ADD;        # timestamp : pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UPDATE 2;   # pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    # self.data.proposals[params].status = 1 # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DIG 5;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    IF_SOME
                      {}
                      {
                        PUSH int 208; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    UNPAIR;     # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    UNPAIR;     # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    CAR;        # pair bool timestamp : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PUSH nat 1; # nat : pair bool timestamp : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    # self.data.proposals[params].status = 3 # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    DIG 5;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    IF_SOME
                      {}
                      {
                        PUSH int 211; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    UNPAIR;     # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    UNPAIR;     # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    CAR;        # pair bool timestamp : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PUSH nat 3; # nat : pair bool timestamp : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }; # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NIL operation; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }
              {
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                # == execute_proposal ==
                # sp.verify(self.data.proposals.contains(params), 'INVALID_PROPOSAL_ID') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                MEM;        # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "INVALID_PROPOSAL_ID"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # sp.verify(self.data.proposals[params].status == 1, 'TIMELOCK_INACTIVE') # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH nat 1; # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    # of_some: Get-item:294 # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH int 294; # int : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # pair (pair bool timestamp) nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CDR;        # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EQ;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "TIMELOCK_INACTIVE"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                # sp.verify(sp.now > self.data.proposals[params].proposal_timelock.ending, 'EXECUTING_TOO_SOON') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    # of_some: Get-item:294 # @some : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH int 294; # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # pair (pair bool timestamp) nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair bool timestamp : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CDR;        # timestamp : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NOW;        # @now : timestamp : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GT;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "EXECUTING_TOO_SOON"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # for op in self.data.proposals[params].proposal_lambda(sp.unit): ... # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NIL operation; # list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    # of_some: Get-item:294 # @some : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH int 294; # int : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 5;      # lambda unit (list operation) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                UNIT;       # unit : lambda unit (list operation) : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EXEC;       # list operation : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                ITER
                  {
                    # sp.operations().push(op) # operation : list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CONS;       # list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }; # list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # self.data.proposals[params].status = 2 # list operation : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DIG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : list operation : nat
                UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation : nat
                UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation : nat
                SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation : nat
                UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation : nat
                SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation : nat
                DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation : nat
                DIG 6;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                IF_SOME
                  {}
                  {
                    PUSH int 306; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                UNPAIR;     # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                SWAP;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                UNPAIR;     # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                CAR;        # pair bool timestamp : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                PUSH nat 2; # nat : pair bool timestamp : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                SWAP;       # pair bool timestamp : nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                PAIR;       # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                PAIR;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                SWAP;       # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                PAIR;       # pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : list operation
                PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : list operation
                SWAP;       # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair unit (contract (pair (option address) (option address)))
                # == get_round_parameters ==
                # sp.result(self.data.round_governance_parameters) # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair unit (contract (pair (option address) (option address)))
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair unit (contract (pair (option address) (option address)))
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair unit (contract (pair (option address) (option address))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # pair (pair (option address) (option address)) nat : pair unit (contract (pair (option address) (option address))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (option address) (option address) : pair unit (contract (pair (option address) (option address))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # sp.transfer(__s54.value, sp.tez(0), sp.snd(params)) # pair (option address) (option address) : pair unit (contract (pair (option address) (option address))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NIL operation; # list operation : pair (option address) (option address) : pair unit (contract (pair (option address) (option address))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DIG 2;      # pair unit (contract (pair (option address) (option address))) : list operation : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CDR;        # contract (pair (option address) (option address)) : list operation : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH mutez 0; # mutez : contract (pair (option address) (option address)) : list operation : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DIG 3;      # pair (option address) (option address) : mutez : contract (pair (option address) (option address)) : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CONS;       # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }
              {
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (lambda unit (list operation)) string
                # == register_proposal ==
                # self.data.proposal_buffer = sp.some(sp.record(proposal_lambda = params.proposal_lambda, proposal_metadata = params.proposal_metadata, sender = sp.sender)) # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (lambda unit (list operation)) string
                UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (lambda unit (list operation)) string
                UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (lambda unit (list operation)) string
                SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (lambda unit (list operation)) string
                CDR;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (lambda unit (list operation)) string
                SENDER;     # @sender : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (lambda unit (list operation)) string
                DIG 4;      # pair (lambda unit (list operation)) string : @sender : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                UNPAIR;     # lambda unit (list operation) : string : @sender : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR 3;     # pair (lambda unit (list operation)) (pair string @sender) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SOME;       # option (pair (lambda unit (list operation)) (pair string @sender)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SWAP;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                # self.data.state = 1 # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                UNPAIR;     # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                CAR;        # pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PUSH nat 1; # nat : pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                SWAP;       # pair (option address) (option address) : nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PAIR;       # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PAIR;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                SWAP;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # sp.transfer((sp.record(address = sp.sender, level = sp.as_nat(sp.level - 1)), sp.self_entry_point('register_proposal_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TRecord(address = sp.TAddress, level = sp.TNat).layout(("address", "level")), sp.TContract(sp.TNat)), self.data.token_address, entry_point='getBalanceAt').open_some()) # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 5;      # address : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CONTRACT %getBalanceAt (pair (pair address nat) (contract nat)); # option (contract (pair (pair address nat) (contract nat))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {}
                  {
                    PUSH int 128; # int : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NIL operation; # list operation : @some : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SELF %register_proposal_callback; # @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH nat 1; # nat : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                LEVEL;      # @level : nat : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SUB;        # int : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                ISNAT;      # option nat : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {}
                  {
                    PUSH int 137; # int : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SENDER;     # @sender : @some : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair @sender @some : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair (pair @sender @some) @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CONS;       # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string @sender))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
          }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == register_proposal_callback ==
                # sp.verify(self.data.state == 1, 'INCORRECT_STATE') # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH nat 1; # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # pair (pair (option address) (option address)) nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CDR;        # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EQ;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "INCORRECT_STATE"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                # sp.verify(self.data.proposal_buffer.is_some(), 'PROPOSAL_BUFFER_EMPTY') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # option (pair (lambda unit (list operation)) (pair string address)) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {
                    DROP;       # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    PUSH string "PROPOSAL_BUFFER_EMPTY"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                # sp.verify(params >= self.data.main_governance_parameters.proposal_threshold, 'NOT_ENOUGH_TOKENS') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair nat nat) (pair int int) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair nat nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GE;         # bool : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "NOT_ENOUGH_TOKENS"; # string : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # sp.verify(sp.sender == self.data.token_address, 'NOT_ALLOWED') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 5;      # address : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SENDER;     # @sender : address : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EQ;         # bool : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # self.data.uuid += 1 # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 7;      # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH nat 1; # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                ADD;        # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                UPDATE 7;   # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                # self.data.proposals[self.data.uuid] = sp.record(creator = self.data.proposal_buffer.open_some().sender, down_votes = 0, origin_level = sp.level, proposal_lambda = self.data.proposal_buffer.open_some().proposal_lambda, proposal_metadata = self.data.proposal_buffer.open_some().proposal_metadata, proposal_timelock = sp.record(activated = False, ending = sp.timestamp(0)), status = 0, up_votes = 0, voters = {}, voting_end = sp.add_seconds(sp.now, self.data.main_governance_parameters.voting_period)) # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NOW;        # @now : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 6;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : @now : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : @now : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : @now : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair nat nat) (pair int int) : @now : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # int : @now : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                ADD;        # timestamp : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EMPTY_MAP address (pair nat nat); # map address (pair nat nat) : timestamp : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair (map address (pair nat nat)) timestamp : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH nat 0; # nat : pair (map address (pair nat nat)) timestamp : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair nat (pair (map address (pair nat nat)) timestamp) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH (pair (pair bool timestamp) nat) (Pair (Pair False "1970-01-01T00:00:00Z") 0); # pair (pair bool timestamp) nat : pair nat (pair (map address (pair nat nat)) timestamp) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 6;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {}
                  {
                    PUSH int 159; # int : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 7;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # option (pair (lambda unit (list operation)) (pair string address)) : string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {}
                  {
                    PUSH int 159; # int : string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # lambda unit (list operation) : string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair (lambda unit (list operation)) string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                LEVEL;      # @level : pair (lambda unit (list operation)) string : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PUSH nat 0; # nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DUP 8;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 3;      # option (pair (lambda unit (list operation)) (pair string address)) : nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF_SOME
                  {}
                  {
                    PUSH int 159; # int : nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                GET 4;      # address : nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair address nat : pair @level (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair (pair address nat) (pair @level (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                PAIR;       # pair (pair (pair address nat) (pair @level (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SOME;       # option (pair (pair (pair address nat) (pair @level (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                DIG 5;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : option (pair (pair (pair address nat) (pair @level (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                GET 7;      # nat : option (pair (pair (pair address nat) (pair @level (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SWAP;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                # self.data.state = 0 # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                UNPAIR;     # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                CAR;        # pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PUSH nat 0; # nat : pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                SWAP;       # pair (option address) (option address) : nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PAIR;       # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PAIR;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                SWAP;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                # self.data.proposal_buffer = sp.none # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                CDR;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                NONE (pair (lambda unit (list operation)) (pair string address)); # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }
              {
                # == set_main_governance_parameters ==
                # sp.verify(sp.sender == sp.self_address, 'NOT_ALLOWED') # pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SELF_ADDRESS; # @self : pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SENDER;     # @sender : @self : pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EQ;         # bool : pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # pair (pair nat nat) (pair int int) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair nat nat) (pair int int)
                # self.data.main_governance_parameters = params # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair nat nat) (pair int int)
                UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair nat nat) (pair int int)
                UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair nat nat) (pair int int)
                CDR;        # big_map string bytes : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair nat nat) (pair int int)
                DIG 3;      # pair (pair nat nat) (pair int int) : big_map string bytes : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }; # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
            NIL operation; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
          }
          {
            IF_LEFT
              {
                # == set_round_governance_parameters ==
                # sp.verify(sp.sender == sp.self_address, 'NOT_ALLOWED') # pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SELF_ADDRESS; # @self : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SENDER;     # @sender : @self : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                COMPARE;    # int : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                EQ;         # bool : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    FAILWITH;   # FAILED
                  }; # pair (option address) (option address) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (option address) (option address)
                # self.data.round_governance_parameters = params # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (option address) (option address)
                UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (option address) (option address)
                SWAP;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (option address) (option address)
                UNPAIR;     # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (option address) (option address)
                CDR;        # nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (option address) (option address)
                DIG 3;      # pair (option address) (option address) : nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PAIR;       # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                PAIR;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                SWAP;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                NIL operation; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }
              {
                IF_LEFT
                  {
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    # == vote ==
                    # sp.verify(self.data.proposals.contains(params.proposal_id), 'INVALID_PROPOSAL_ID') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # pair nat nat : pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUG 2;      # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    MEM;        # bool : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {}
                      {
                        PUSH string "INVALID_PROPOSAL_ID"; # string : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    # sp.verify(self.data.proposals[params.proposal_id].status == 0, 'VOTING_ALREADY_ENDED') # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PUSH nat 0; # nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 3;      # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {
                        # of_some: Get-item:218 # @some : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        PUSH int 218; # int : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 3;      # pair (pair bool timestamp) nat : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CDR;        # nat : nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    COMPARE;    # int : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    EQ;         # bool : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {}
                      {
                        PUSH string "VOTING_ALREADY_ENDED"; # string : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    # sp.verify(sp.now < self.data.proposals[params.proposal_id].voting_end, 'VOTING_ALREADY_ENDED') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # pair nat nat : pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUG 2;      # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {
                        # of_some: Get-item:218 # @some : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        PUSH int 218; # int : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 8;      # timestamp : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    NOW;        # @now : timestamp : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    COMPARE;    # int : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    LT;         # bool : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {}
                      {
                        PUSH string "VOTING_ALREADY_ENDED"; # string : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    # sp.verify(~ (self.data.proposals[params.proposal_id].voters.contains(sp.sender)), 'ALREADY_VOTED') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # pair nat nat : pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUG 2;      # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {
                        # of_some: Get-item:218 # @some : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        PUSH int 218; # int : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 7;      # map address (pair nat nat) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SENDER;     # @sender : map address (pair nat nat) : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    MEM;        # bool : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {
                        PUSH string "ALREADY_VOTED"; # string : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }
                      {}; # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    # self.data.voting_buffer = sp.some(sp.record(proposal_id = params.proposal_id, sender = sp.sender, vote_value = params.vote_value)) # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # pair nat nat : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUG 2;      # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    CDR;        # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    SENDER;     # @sender : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    DUP 4;      # pair nat nat : @sender : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    CAR;        # nat : @sender : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    PAIR 3;     # pair nat (pair @sender nat) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    SOME;       # option (pair nat (pair @sender nat)) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    UPDATE 8;   # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    # self.data.state = 1 # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair nat nat
                    SWAP;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat
                    UNPAIR;     # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat
                    CAR;        # pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat
                    PUSH nat 1; # nat : pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat
                    SWAP;       # pair (option address) (option address) : nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat
                    PAIR;       # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat
                    PAIR;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair nat nat
                    SWAP;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair nat nat
                    PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair nat nat
                    SWAP;       # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    # sp.transfer((sp.record(address = sp.sender, level = self.data.proposals[params.proposal_id].origin_level), sp.self_entry_point('vote_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TRecord(address = sp.TAddress, level = sp.TNat).layout(("address", "level")), sp.TContract(sp.TNat)), self.data.token_address, entry_point='getBalanceAt').open_some()) # pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    NIL operation; # list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 5;      # address : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CONTRACT %getBalanceAt (pair (pair address nat) (contract nat)); # option (contract (pair (pair address nat) (contract nat))) : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {}
                      {
                        PUSH int 236; # int : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PUSH mutez 0; # mutez : @some : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SELF %vote_callback; # @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 6;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DIG 5;      # pair nat nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {
                        # of_some: Get-item:218 # @some : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        PUSH int 218; # int : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 3;      # nat : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SENDER;     # @sender : nat : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PAIR;       # pair @sender nat : @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PAIR;       # pair (pair @sender nat) @self : mutez : @some : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CONS;       # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }
                  {
                    # == vote_callback ==
                    # sp.verify(self.data.state == 1, 'INCORRECT_STATE') # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PUSH nat 1; # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 3;      # pair (pair (option address) (option address)) nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CDR;        # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    EQ;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {}
                      {
                        PUSH string "INCORRECT_STATE"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    # sp.verify(self.data.voting_buffer.is_some(), 'VOTING_BUFFER_EMPTY') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 8;      # option (pair nat (pair address nat)) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {
                        DROP;       # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        PUSH string "VOTING_BUFFER_EMPTY"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    # sp.verify(params > 0, 'INVALID_VOTE') # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PUSH nat 0; # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    LT;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {}
                      {
                        PUSH string "INVALID_VOTE"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    # sp.verify(sp.sender == self.data.token_address, 'NOT_ALLOWED') # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 5;      # address : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SENDER;     # @sender : address : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    EQ;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {}
                      {
                        PUSH string "NOT_ALLOWED"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].voters[self.data.voting_buffer.open_some().sender] = sp.record(value = self.data.voting_buffer.open_some().vote_value, votes = params) # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 7;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 8;      # option (pair nat (pair address nat)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {}
                      {
                        PUSH int 264; # int : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {}
                      {
                        PUSH int 269; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP;        # @some : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 7;      # map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 8;      # nat : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 10;     # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 8;      # option (pair nat (pair address nat)) : nat : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {}
                      {
                        PUSH int 264; # int : nat : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # nat : nat : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PAIR;       # pair nat nat : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    SOME;       # option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DIG 9;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    GET 8;      # option (pair nat (pair address nat)) : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    IF_SOME
                      {}
                      {
                        PUSH int 264; # int : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        FAILWITH;   # FAILED
                      }; # @some : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    GET 3;      # address : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UPDATE;     # map address (pair nat nat) : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UPDATE 7;   # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                    PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                    SWAP;       # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    # if self.data.voting_buffer.open_some().vote_value == 0: # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    PUSH nat 0; # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 8;      # option (pair nat (pair address nat)) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF_SOME
                      {}
                      {
                        PUSH int 264; # int : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    GET 4;      # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    EQ;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    IF
                      {
                        SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                        # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].up_votes += params # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                        DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                        DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        DIG 6;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        GET 8;      # option (pair nat (pair address nat)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        IF_SOME
                          {}
                          {
                            PUSH int 264; # int : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            FAILWITH;   # FAILED
                          }; # @some : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        IF_SOME
                          {}
                          {
                            PUSH int 275; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            FAILWITH;   # FAILED
                          }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        DUP;        # @some : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        GET 5;      # nat : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                        DIG 7;      # nat : nat : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        ADD;        # nat : @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        UPDATE 5;   # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                        PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }
                      {
                        # if self.data.voting_buffer.open_some().vote_value == 1: # nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        PUSH nat 1; # nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        DUP 3;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        GET 8;      # option (pair nat (pair address nat)) : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        IF_SOME
                          {}
                          {
                            PUSH int 264; # int : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            FAILWITH;   # FAILED
                          }; # @some : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        GET 4;      # nat : nat : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        COMPARE;    # int : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        EQ;         # bool : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                        IF
                          {
                            SWAP;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                            # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].down_votes += params # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                            DUP;        # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat
                            DUG 2;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            UNPAIR;     # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            SWAP;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            UNPAIR;     # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            SWAP;       # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            DUP;        # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            DIG 6;      # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            GET 8;      # option (pair nat (pair address nat)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            IF_SOME
                              {}
                              {
                                PUSH int 264; # int : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                                FAILWITH;   # FAILED
                              }; # @some : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            CAR;        # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            DUP;        # nat : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            DUG 2;      # nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            GET;        # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            IF_SOME
                              {}
                              {
                                PUSH int 278; # int : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                                FAILWITH;   # FAILED
                              }; # @some : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            UNPAIR;     # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            UNPAIR;     # pair address nat : pair nat (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            UNPAIR;     # address : nat : pair nat (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            SWAP;       # nat : address : pair nat (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : nat
                            DIG 9;      # nat : nat : address : pair nat (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            ADD;        # nat : address : pair nat (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            SWAP;       # address : nat : pair nat (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            PAIR;       # pair address nat : pair nat (pair (lambda unit (list operation)) string) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            PAIR;       # pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string)) : pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            PAIR;       # pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            SOME;       # option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : nat : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            SWAP;       # nat : option (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            UPDATE;     # big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : option (pair (lambda unit (list operation)) (pair string address)) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            SWAP;       # option (pair (lambda unit (list operation)) (pair string address)) : big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            PAIR;       # pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            SWAP;       # pair (pair (pair nat nat) (pair int int)) (big_map string bytes) : pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            PAIR;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                            PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                          }
                          {
                            PUSH string "INVALID_VOTE_VALUE"; # string : nat : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                            FAILWITH;   # FAILED
                          }; # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                      }; # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    # self.data.state = 0 # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UNPAIR;     # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    SWAP;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                    UNPAIR;     # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                    CAR;        # pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                    PUSH nat 0; # nat : pair (option address) (option address) : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                    SWAP;       # pair (option address) (option address) : nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                    PAIR;       # pair (pair (option address) (option address)) nat : pair address (pair nat (option (pair nat (pair address nat)))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                    PAIR;       # pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))) : pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))
                    SWAP;       # pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp)))))) : pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))
                    PAIR;       # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    # self.data.voting_buffer = sp.none # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    NONE (pair nat (pair address nat)); # option (pair nat (pair address nat)) : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    UPDATE 8;   # pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                    NIL operation; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
                  }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
              }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
          }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
      }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
    NIL operation; # list operation : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
    SWAP;       # list operation : list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
      }; # list operation : pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat))))))
    PAIR;       # pair (list operation) (pair (pair (pair (pair (pair nat nat) (pair int int)) (big_map string bytes)) (pair (option (pair (lambda unit (list operation)) (pair string address))) (big_map nat (pair (pair (pair address nat) (pair nat (pair (lambda unit (list operation)) string))) (pair (pair (pair bool timestamp) nat) (pair nat (pair (map address (pair nat nat)) timestamp))))))) (pair (pair (pair (option address) (option address)) nat) (pair address (pair nat (option (pair nat (pair address nat)))))))
  };