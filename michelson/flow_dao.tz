parameter (or (or (nat %end_voting) (or (nat %execute_proposal) (pair %register_proposal (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (or (or (nat %register_proposal_callback) (pair %set_governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold))))) (or (pair %vote (nat %proposal_id) (nat %vote_value)) (nat %vote_callback))));
storage   (pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))));
code
  {
    UNPAIR;     # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%end_voting
            # == end_voting ==
            # sp.verify(self.data.proposals.contains(params), 'INVALID_PROPOSAL_ID') # @storage : @parameter%end_voting
            DUP;        # @storage : @storage : @parameter%end_voting
            DUG 2;      # @storage : @parameter%end_voting : @storage
            CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%end_voting : @storage
            GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            SWAP;       # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
            DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
            DUG 2;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            MEM;        # bool : @parameter%end_voting : @storage
            IF
              {}
              {
                PUSH string "INVALID_PROPOSAL_ID"; # string : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }; # @parameter%end_voting : @storage
            SWAP;       # @storage : @parameter%end_voting
            # sp.verify(sp.now > self.data.proposals[params].voting_end, 'VOTING_ONGOING') # @storage : @parameter%end_voting
            DUP;        # @storage : @storage : @parameter%end_voting
            DUG 2;      # @storage : @parameter%end_voting : @storage
            CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%end_voting : @storage
            GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            SWAP;       # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
            DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
            DUG 2;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            IF_NONE
              {
                PUSH int 210; # int : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:210 # @some : @parameter%end_voting : @storage
              }; # @some : @parameter%end_voting : @storage
            GET 11;     # timestamp : @parameter%end_voting : @storage
            NOW;        # @now : timestamp : @parameter%end_voting : @storage
            COMPARE;    # int : @parameter%end_voting : @storage
            GT;         # bool : @parameter%end_voting : @storage
            IF
              {}
              {
                PUSH string "VOTING_ONGOING"; # string : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }; # @parameter%end_voting : @storage
            # sp.verify(self.data.proposals[params].status == 0, 'VOTING_ALREADY_ENDED') # @parameter%end_voting : @storage
            PUSH nat 0; # nat : @parameter%end_voting : @storage
            DUP 3;      # @storage : nat : @parameter%end_voting : @storage
            CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : nat : @parameter%end_voting : @storage
            GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
            DUP 3;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
            GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
            IF_NONE
              {
                PUSH int 210; # int : nat : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:210 # @some : nat : @parameter%end_voting : @storage
              }; # @some : nat : @parameter%end_voting : @storage
            GET 16;     # nat : nat : @parameter%end_voting : @storage
            COMPARE;    # int : @parameter%end_voting : @storage
            EQ;         # bool : @parameter%end_voting : @storage
            IF
              {}
              {
                PUSH string "VOTING_ALREADY_ENDED"; # string : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }; # @parameter%end_voting : @storage
            SWAP;       # @storage : @parameter%end_voting
            # if (self.data.proposals[params].up_votes > self.data.proposals[params].down_votes) & ((self.data.proposals[params].up_votes + self.data.proposals[params].down_votes) >= self.data.governance_parameters.quorum_votes): # @storage : @parameter%end_voting
            DUP;        # @storage : @storage : @parameter%end_voting
            DUG 2;      # @storage : @parameter%end_voting : @storage
            CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%end_voting : @storage
            GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            SWAP;       # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
            DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
            DUG 2;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : @storage
            IF_NONE
              {
                PUSH int 210; # int : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:210 # @some : @parameter%end_voting : @storage
              }; # @some : @parameter%end_voting : @storage
            GET 3;      # nat : @parameter%end_voting : @storage
            DUP 3;      # @storage : nat : @parameter%end_voting : @storage
            CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : nat : @parameter%end_voting : @storage
            GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
            DUP 3;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
            GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
            IF_NONE
              {
                PUSH int 210; # int : nat : @parameter%end_voting : @storage
                FAILWITH;   # FAILED
              }
              {
                # of_some: Get-item:210 # @some : nat : @parameter%end_voting : @storage
              }; # @some : nat : @parameter%end_voting : @storage
            CAR;        # nat : nat : @parameter%end_voting : @storage
            COMPARE;    # int : @parameter%end_voting : @storage
            GT;         # bool : @parameter%end_voting : @storage
            IF
              {
                SWAP;       # @storage : @parameter%end_voting
                DUP;        # @storage : @storage : @parameter%end_voting
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @storage : @parameter%end_voting
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : @storage : @parameter%end_voting
                CAR;        # pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold))) : @storage : @parameter%end_voting
                GET 5;      # nat : @storage : @parameter%end_voting
                SWAP;       # @storage : nat : @parameter%end_voting
                DUP;        # @storage : @storage : nat : @parameter%end_voting
                DUG 3;      # @storage : nat : @parameter%end_voting : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : nat : @parameter%end_voting : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
                DUP 3;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%end_voting : @storage
                IF_NONE
                  {
                    PUSH int 210; # int : nat : @parameter%end_voting : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:210 # @some : nat : @parameter%end_voting : @storage
                  }; # @some : nat : @parameter%end_voting : @storage
                GET 3;      # nat : nat : @parameter%end_voting : @storage
                DUP 4;      # @storage : nat : nat : @parameter%end_voting : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : nat : nat : @parameter%end_voting : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : nat : @parameter%end_voting : @storage
                DUP 4;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : nat : @parameter%end_voting : @storage
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : nat : @parameter%end_voting : @storage
                IF_NONE
                  {
                    PUSH int 210; # int : nat : nat : @parameter%end_voting : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:210 # @some : nat : nat : @parameter%end_voting : @storage
                  }; # @some : nat : nat : @parameter%end_voting : @storage
                CAR;        # nat : nat : nat : @parameter%end_voting : @storage
                ADD;        # nat : nat : @parameter%end_voting : @storage
                COMPARE;    # int : @parameter%end_voting : @storage
                GE;         # bool : @parameter%end_voting : @storage
              }
              {
                PUSH bool False; # bool : @parameter%end_voting : @storage
              }; # bool : @parameter%end_voting : @storage
            IF
              {
                SWAP;       # @storage : @parameter%end_voting
                # self.data.proposals[params].proposal_timelock.activated = True # @storage : @parameter%end_voting
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UNPAIR;     # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DUP;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DUP 6;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DUG 2;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                IF_NONE
                  {
                    PUSH int 223; # int : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DUP;        # @some : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                GET 9;      # pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                PUSH bool True; # bool : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UPDATE 2;   # pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UPDATE 9;   # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SOME;       # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # @parameter%end_voting : option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UPDATE;     # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                PAIR;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : @parameter%end_voting
                # self.data.proposals[params].proposal_timelock.ending = sp.add_seconds(sp.now, self.data.governance_parameters.timelock_period) # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : @parameter%end_voting
                DUP;        # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : @parameter%end_voting
                DUG 2;      # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SWAP;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                UNPAIR;     # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SWAP;       # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUP;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUP 6;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUG 2;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                IF_NONE
                  {
                    PUSH int 224; # int : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUP;        # @some : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                GET 9;      # pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                NOW;        # @now : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DIG 9;      # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : @now : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @now : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : @now : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                CAR;        # pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold))) : @now : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                GET 3;      # int : @now : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                ADD;        # timestamp : pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UPDATE 1;   # pair (timestamp %ending) (bool %activated) : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UPDATE 9;   # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SOME;       # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # @parameter%end_voting : option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UPDATE;     # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                # self.data.proposals[params].status = 1 # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DUP;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DIG 5;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                DUG 2;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                IF_NONE
                  {
                    PUSH int 227; # int : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PUSH nat 1; # nat : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                UPDATE 16;  # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SOME;       # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # @parameter%end_voting : option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                UPDATE;     # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }
              {
                SWAP;       # @storage : @parameter%end_voting
                # self.data.proposals[params].status = 3 # @storage : @parameter%end_voting
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                UNPAIR;     # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                SWAP;       # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DUP;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%end_voting
                DIG 5;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                DUP;        # @parameter%end_voting : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                DUG 2;      # @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                IF_NONE
                  {
                    PUSH int 230; # int : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PUSH nat 3; # nat : @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                UPDATE 16;  # @some : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SOME;       # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%end_voting : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # @parameter%end_voting : option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                UPDATE;     # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }; # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
            NIL operation; # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%execute_proposal
                # == execute_proposal ==
                # sp.verify(self.data.proposals.contains(params), 'INVALID_PROPOSAL_ID') # @storage : @parameter%execute_proposal
                DUP;        # @storage : @storage : @parameter%execute_proposal
                DUG 2;      # @storage : @parameter%execute_proposal : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%execute_proposal : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : @storage
                SWAP;       # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUP;        # @parameter%execute_proposal : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUG 2;      # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : @storage
                MEM;        # bool : @parameter%execute_proposal : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_PROPOSAL_ID"; # string : @parameter%execute_proposal : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%execute_proposal : @storage
                # sp.verify(self.data.proposals[params].status == 1, 'TIMELOCK_INACTIVE') # @parameter%execute_proposal : @storage
                PUSH nat 1; # nat : @parameter%execute_proposal : @storage
                DUP 3;      # @storage : nat : @parameter%execute_proposal : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : nat : @parameter%execute_proposal : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%execute_proposal : @storage
                DUP 3;      # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%execute_proposal : @storage
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%execute_proposal : @storage
                IF_NONE
                  {
                    PUSH int 316; # int : nat : @parameter%execute_proposal : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:316 # @some : nat : @parameter%execute_proposal : @storage
                  }; # @some : nat : @parameter%execute_proposal : @storage
                GET 16;     # nat : nat : @parameter%execute_proposal : @storage
                COMPARE;    # int : @parameter%execute_proposal : @storage
                EQ;         # bool : @parameter%execute_proposal : @storage
                IF
                  {}
                  {
                    PUSH string "TIMELOCK_INACTIVE"; # string : @parameter%execute_proposal : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%execute_proposal : @storage
                SWAP;       # @storage : @parameter%execute_proposal
                # sp.verify(sp.now > self.data.proposals[params].proposal_timelock.ending, 'EXECUTING_TOO_SOON') # @storage : @parameter%execute_proposal
                DUP;        # @storage : @storage : @parameter%execute_proposal
                DUG 2;      # @storage : @parameter%execute_proposal : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%execute_proposal : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : @storage
                SWAP;       # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUP;        # @parameter%execute_proposal : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUG 2;      # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : @storage
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : @storage
                IF_NONE
                  {
                    PUSH int 316; # int : @parameter%execute_proposal : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:316 # @some : @parameter%execute_proposal : @storage
                  }; # @some : @parameter%execute_proposal : @storage
                GET 9;      # pair (timestamp %ending) (bool %activated) : @parameter%execute_proposal : @storage
                CAR;        # timestamp : @parameter%execute_proposal : @storage
                NOW;        # @now : timestamp : @parameter%execute_proposal : @storage
                COMPARE;    # int : @parameter%execute_proposal : @storage
                GT;         # bool : @parameter%execute_proposal : @storage
                IF
                  {}
                  {
                    PUSH string "EXECUTING_TOO_SOON"; # string : @parameter%execute_proposal : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%execute_proposal : @storage
                # for op in self.data.proposals[params].proposal_lambda(sp.unit): ... # @parameter%execute_proposal : @storage
                NIL operation; # list operation : @parameter%execute_proposal : @storage
                DUP 3;      # @storage : list operation : @parameter%execute_proposal : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : list operation : @parameter%execute_proposal : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : list operation : @parameter%execute_proposal : @storage
                DUP 3;      # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : list operation : @parameter%execute_proposal : @storage
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : list operation : @parameter%execute_proposal : @storage
                IF_NONE
                  {
                    PUSH int 316; # int : list operation : @parameter%execute_proposal : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:316 # @some : list operation : @parameter%execute_proposal : @storage
                  }; # @some : list operation : @parameter%execute_proposal : @storage
                GET 7;      # lambda unit (list operation) : list operation : @parameter%execute_proposal : @storage
                UNIT;       # unit : lambda unit (list operation) : list operation : @parameter%execute_proposal : @storage
                EXEC;       # list operation : list operation : @parameter%execute_proposal : @storage
                ITER
                  {
                    # sp.operations().push(op) # operation : list operation : @parameter%execute_proposal : @storage
                    CONS;       # list operation : @parameter%execute_proposal : @storage
                  }; # list operation : @parameter%execute_proposal : @storage
                # self.data.proposals[params].status = 2 # list operation : @parameter%execute_proposal : @storage
                DIG 2;      # @storage : list operation : @parameter%execute_proposal
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation : @parameter%execute_proposal
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation : @parameter%execute_proposal
                SWAP;       # pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation : @parameter%execute_proposal
                UNPAIR;     # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation : @parameter%execute_proposal
                SWAP;       # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation : @parameter%execute_proposal
                DUP;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation : @parameter%execute_proposal
                DIG 6;      # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                DUP;        # @parameter%execute_proposal : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                DUG 2;      # @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                IF_NONE
                  {
                    PUSH int 328; # int : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                PUSH nat 2; # nat : @some : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                UPDATE 16;  # @some : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                SOME;       # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%execute_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                SWAP;       # @parameter%execute_proposal : option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                UPDATE;     # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                SWAP;       # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                PAIR;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : list operation
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : list operation
                SWAP;       # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }
              {
                SWAP;       # @storage : @parameter%register_proposal
                # == register_proposal ==
                # self.data.proposal_buffer = sp.some(sp.record(sender = sp.sender, proposal_metadata = params.proposal_metadata, proposal_lambda = params.proposal_lambda)) # @storage : @parameter%register_proposal
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal
                SWAP;       # pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal
                CDR;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal
                DIG 3;      # @parameter%register_proposal : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                UNPAIR;     # string : lambda unit (list operation) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SENDER;     # @sender : string : lambda unit (list operation) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR 3;     # pair @sender (pair string (lambda unit (list operation))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SOME;       # option (pair @sender (pair string (lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                # self.data.state = 1 # pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                UNPAIR;     # pair (nat %state) (address %token_address) : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                CDR;        # address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                PUSH nat 1; # nat : address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                PAIR;       # pair nat address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                PAIR;       # pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                SWAP;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                # sp.transfer((sp.record(address = sp.sender, level = sp.as_nat(sp.level - 1)), sp.self_entry_point('register_proposal_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TRecord(address = sp.TAddress, level = sp.TNat).layout(("address", "level")), sp.TContract(sp.TNat)), self.data.token_address, entry_point='getBalanceAt').open_some(message = 'INVALID_GOVERNANCE_TOKEN')) # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUP;        # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                GET 3;      # pair nat address : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CDR;        # address : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CONTRACT %getBalanceAt (pair (pair address nat) (contract nat)); # option (contract (pair (pair address nat) (contract nat))) : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                IF_NONE
                  {
                    PUSH string "INVALID_GOVERNANCE_TOKEN"; # string : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                NIL operation; # list operation : @some : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SWAP;       # @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SELF %register_proposal_callback; # @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PUSH nat 1; # nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                LEVEL;      # @level : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SUB;        # int : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                ISNAT;      # option nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                IF_NONE
                  {
                    PUSH int 159; # int : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SENDER;     # @sender : @some : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PAIR;       # pair @sender @some : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PAIR;       # pair (pair @sender @some) @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CONS;       # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }; # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
          }; # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == register_proposal_callback ==
                # sp.verify(self.data.state == 1, 'INCORRECT_STATE') # @parameter%register_proposal_callback : @storage
                PUSH nat 1; # nat : @parameter%register_proposal_callback : @storage
                DUP 3;      # @storage : nat : @parameter%register_proposal_callback : @storage
                GET 3;      # pair (nat %state) (address %token_address) : nat : @parameter%register_proposal_callback : @storage
                CAR;        # nat : nat : @parameter%register_proposal_callback : @storage
                COMPARE;    # int : @parameter%register_proposal_callback : @storage
                EQ;         # bool : @parameter%register_proposal_callback : @storage
                IF
                  {}
                  {
                    PUSH string "INCORRECT_STATE"; # string : @parameter%register_proposal_callback : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%register_proposal_callback : @storage
                SWAP;       # @storage : @parameter%register_proposal_callback
                # sp.verify(self.data.proposal_buffer.is_some(), 'PROPOSAL_BUFFER_EMPTY') # @storage : @parameter%register_proposal_callback
                DUP;        # @storage : @storage : @parameter%register_proposal_callback
                DUG 2;      # @storage : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%register_proposal_callback : @storage
                GET 3;      # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : @parameter%register_proposal_callback : @storage
                IF_NONE
                  {
                    PUSH string "PROPOSAL_BUFFER_EMPTY"; # string : @parameter%register_proposal_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    DROP;       # @parameter%register_proposal_callback : @storage
                  }; # @parameter%register_proposal_callback : @storage
                SWAP;       # @storage : @parameter%register_proposal_callback
                # sp.verify(params >= self.data.governance_parameters.proposal_threshold, 'NOT_ENOUGH_TOKENS') # @storage : @parameter%register_proposal_callback
                DUP;        # @storage : @storage : @parameter%register_proposal_callback
                DUG 2;      # @storage : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold))) : @parameter%register_proposal_callback : @storage
                GET 6;      # nat : @parameter%register_proposal_callback : @storage
                SWAP;       # @parameter%register_proposal_callback : nat : @storage
                DUP;        # @parameter%register_proposal_callback : @parameter%register_proposal_callback : nat : @storage
                DUG 2;      # @parameter%register_proposal_callback : nat : @parameter%register_proposal_callback : @storage
                COMPARE;    # int : @parameter%register_proposal_callback : @storage
                GE;         # bool : @parameter%register_proposal_callback : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ENOUGH_TOKENS"; # string : @parameter%register_proposal_callback : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%register_proposal_callback : @storage
                SWAP;       # @storage : @parameter%register_proposal_callback
                # sp.verify(sp.sender == self.data.token_address, 'NOT_ALLOWED') # @storage : @parameter%register_proposal_callback
                DUP;        # @storage : @storage : @parameter%register_proposal_callback
                DUG 2;      # @storage : @parameter%register_proposal_callback : @storage
                GET 3;      # pair (nat %state) (address %token_address) : @parameter%register_proposal_callback : @storage
                CDR;        # address : @parameter%register_proposal_callback : @storage
                SENDER;     # @sender : address : @parameter%register_proposal_callback : @storage
                COMPARE;    # int : @parameter%register_proposal_callback : @storage
                EQ;         # bool : @parameter%register_proposal_callback : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%register_proposal_callback : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%register_proposal_callback : @storage
                SWAP;       # @storage : @parameter%register_proposal_callback
                # self.data.uuid += 1 # @storage : @parameter%register_proposal_callback
                DUP;        # @storage : @storage : @parameter%register_proposal_callback
                GET 5;      # nat : @storage : @parameter%register_proposal_callback
                PUSH nat 1; # nat : nat : @storage : @parameter%register_proposal_callback
                ADD;        # nat : @storage : @parameter%register_proposal_callback
                UPDATE 5;   # @storage : @parameter%register_proposal_callback
                # self.data.proposals[self.data.uuid] = sp.record(up_votes = 0, down_votes = 0, proposal_metadata = self.data.proposal_buffer.open_some().proposal_metadata, proposal_lambda = self.data.proposal_buffer.open_some().proposal_lambda, proposal_timelock = sp.record(ending = sp.timestamp(0), activated = False), voting_end = sp.add_seconds(sp.now, self.data.governance_parameters.voting_period), creator = self.data.proposal_buffer.open_some().sender, origin_level = sp.level, status = 0) # @storage : @parameter%register_proposal_callback
                DUP;        # @storage : @storage : @parameter%register_proposal_callback
                DUG 2;      # @storage : @parameter%register_proposal_callback : @storage
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                SWAP;       # pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                UNPAIR;     # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                SWAP;       # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                PUSH nat 0; # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                LEVEL;      # @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                DUP 8;      # @storage : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                GET 3;      # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                IF_NONE
                  {
                    PUSH int 181; # int : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                NOW;        # @now : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                DUP 10;     # @storage : @now : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @now : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : @now : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold))) : @now : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # int : @now : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                ADD;        # timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                PUSH (pair timestamp bool) (Pair "1970-01-01T00:00:00Z" False); # pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                DUP 11;     # @storage : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                GET 3;      # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                IF_NONE
                  {
                    PUSH int 181; # int : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                GET 4;      # lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                DUP 12;     # @storage : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                GET 3;      # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                IF_NONE
                  {
                    PUSH int 181; # int : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                GET 3;      # string : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                PUSH nat 0; # nat : string : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                DUP;        # nat : nat : string : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                PAIR 9;     # pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%register_proposal_callback : @storage
                DIG 5;      # @parameter%register_proposal_callback : pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @storage
                DROP;       # pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @storage
                SOME;       # option (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat)))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @storage
                DIG 5;      # @storage : option (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat)))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                GET 5;      # nat : option (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat)))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                UPDATE;     # big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))
                # self.data.state = 0 # pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))
                UNPAIR;     # pair (nat %state) (address %token_address) : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))
                CDR;        # address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))
                PUSH nat 0; # nat : address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))
                PAIR;       # pair nat address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))
                PAIR;       # pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))
                SWAP;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                # self.data.proposal_buffer = sp.none # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                CDR;        # big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                NONE (pair address (pair string (lambda unit (list operation)))); # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }
              {
                # == set_governance_parameters ==
                # sp.verify(sp.sender == sp.self_address, 'NOT_ALLOWED') # @parameter%set_governance_parameters : @storage
                SELF_ADDRESS; # @self : @parameter%set_governance_parameters : @storage
                SENDER;     # @sender : @self : @parameter%set_governance_parameters : @storage
                COMPARE;    # int : @parameter%set_governance_parameters : @storage
                EQ;         # bool : @parameter%set_governance_parameters : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%set_governance_parameters : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%set_governance_parameters : @storage
                SWAP;       # @storage : @parameter%set_governance_parameters
                # self.data.governance_parameters = params # @storage : @parameter%set_governance_parameters
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%set_governance_parameters
                UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%set_governance_parameters
                CDR;        # big_map string bytes : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%set_governance_parameters
                DIG 3;      # @parameter%set_governance_parameters : big_map string bytes : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair @parameter%set_governance_parameters (big_map string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair @parameter%set_governance_parameters (big_map string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair @parameter%set_governance_parameters (big_map string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }; # pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
            NIL operation; # list operation : pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%vote
                # == vote ==
                # sp.verify(self.data.proposals.contains(params.proposal_id), 'INVALID_PROPOSAL_ID') # @storage : @parameter%vote
                DUP;        # @storage : @storage : @parameter%vote
                DUG 2;      # @storage : @parameter%vote : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%vote : @storage
                SWAP;       # @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUP;        # @parameter%vote : @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUG 2;      # @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%vote : @storage
                CAR;        # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%vote : @storage
                MEM;        # bool : @parameter%vote : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_PROPOSAL_ID"; # string : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote : @storage
                # sp.verify(self.data.proposals[params.proposal_id].status == 0, 'VOTING_ALREADY_ENDED') # @parameter%vote : @storage
                PUSH nat 0; # nat : @parameter%vote : @storage
                DUP 3;      # @storage : nat : @parameter%vote : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : nat : @parameter%vote : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%vote : @storage
                DUP 3;      # @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%vote : @storage
                CAR;        # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%vote : @storage
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @parameter%vote : @storage
                IF_NONE
                  {
                    PUSH int 240; # int : nat : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:240 # @some : nat : @parameter%vote : @storage
                  }; # @some : nat : @parameter%vote : @storage
                GET 16;     # nat : nat : @parameter%vote : @storage
                COMPARE;    # int : @parameter%vote : @storage
                EQ;         # bool : @parameter%vote : @storage
                IF
                  {}
                  {
                    PUSH string "VOTING_ALREADY_ENDED"; # string : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote : @storage
                SWAP;       # @storage : @parameter%vote
                # sp.verify(sp.now < self.data.proposals[params.proposal_id].voting_end, 'VOTING_ALREADY_ENDED') # @storage : @parameter%vote
                DUP;        # @storage : @storage : @parameter%vote
                DUG 2;      # @storage : @parameter%vote : @storage
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote : @storage
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%vote : @storage
                SWAP;       # @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUP;        # @parameter%vote : @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @storage
                DUG 2;      # @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%vote : @storage
                CAR;        # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%vote : @storage
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : @parameter%vote : @storage
                IF_NONE
                  {
                    PUSH int 240; # int : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:240 # @some : @parameter%vote : @storage
                  }; # @some : @parameter%vote : @storage
                GET 11;     # timestamp : @parameter%vote : @storage
                NOW;        # @now : timestamp : @parameter%vote : @storage
                COMPARE;    # int : @parameter%vote : @storage
                LT;         # bool : @parameter%vote : @storage
                IF
                  {}
                  {
                    PUSH string "VOTING_ALREADY_ENDED"; # string : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote : @storage
                SWAP;       # @storage : @parameter%vote
                # sp.verify(~ (self.data.voters.contains((sp.sender, params.proposal_id))), 'ALREADY_VOTED') # @storage : @parameter%vote
                DUP;        # @storage : @storage : @parameter%vote
                DUG 2;      # @storage : @parameter%vote : @storage
                GET 7;      # big_map (pair address nat) (pair (nat %votes) (nat %value)) : @parameter%vote : @storage
                SWAP;       # @parameter%vote : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage
                DUP;        # @parameter%vote : @parameter%vote : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage
                DUG 2;      # @parameter%vote : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @parameter%vote : @storage
                CAR;        # nat : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @parameter%vote : @storage
                SENDER;     # @sender : nat : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @parameter%vote : @storage
                PAIR;       # pair @sender nat : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @parameter%vote : @storage
                MEM;        # bool : @parameter%vote : @storage
                IF
                  {
                    PUSH string "ALREADY_VOTED"; # string : @parameter%vote : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @parameter%vote : @storage
                # self.data.voting_buffer = sp.some(sp.record(sender = sp.sender, proposal_id = params.proposal_id, vote_value = params.vote_value)) # @parameter%vote : @storage
                DUP;        # @parameter%vote : @parameter%vote : @storage
                CDR;        # nat : @parameter%vote : @storage
                SWAP;       # @parameter%vote : nat : @storage
                DUP;        # @parameter%vote : @parameter%vote : nat : @storage
                DUG 3;      # @parameter%vote : nat : @storage : @parameter%vote
                CAR;        # nat : nat : @storage : @parameter%vote
                SENDER;     # @sender : nat : nat : @storage : @parameter%vote
                PAIR 3;     # pair @sender (pair nat nat) : @storage : @parameter%vote
                SOME;       # option (pair @sender (pair nat nat)) : @storage : @parameter%vote
                UPDATE 8;   # @storage : @parameter%vote
                # self.data.state = 1 # @storage : @parameter%vote
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote
                SWAP;       # pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote
                UNPAIR;     # pair (nat %state) (address %token_address) : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote
                CDR;        # address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote
                PUSH nat 1; # nat : address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote
                PAIR;       # pair nat address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote
                PAIR;       # pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : @parameter%vote
                SWAP;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : @parameter%vote
                SWAP;       # @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                # sp.transfer((sp.record(address = sp.sender, level = sp.as_nat(self.data.proposals[params.proposal_id].origin_level - 1)), sp.self_entry_point('vote_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TRecord(address = sp.TAddress, level = sp.TNat).layout(("address", "level")), sp.TContract(sp.TNat)), self.data.token_address, entry_point='getBalanceAt').open_some(message = 'INVALID_GOVERNANCE_TOKEN')) # @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                NIL operation; # list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUP 3;      # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                GET 3;      # pair nat address : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CDR;        # address : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CONTRACT %getBalanceAt (pair (pair address nat) (contract nat)); # option (contract (pair (pair address nat) (contract nat))) : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                IF_NONE
                  {
                    PUSH string "INVALID_GOVERNANCE_TOKEN"; # string : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SELF %vote_callback; # @self : mutez : @some : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PUSH nat 1; # nat : @self : mutez : @some : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DUP 7;      # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))) : nat : @self : mutez : @some : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CAR;        # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : nat : @self : mutez : @some : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                GET 4;      # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @self : mutez : @some : list operation : @parameter%vote : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                DIG 6;      # @parameter%vote : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CAR;        # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                IF_NONE
                  {
                    PUSH int 240; # int : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                    FAILWITH;   # FAILED
                  }
                  {
                    # of_some: Get-item:240 # @some : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                  }; # @some : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                GET 15;     # nat : nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SUB;        # int : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                ISNAT;      # option nat : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                IF_NONE
                  {
                    PUSH int 268; # int : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                SENDER;     # @sender : @some : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PAIR;       # pair @sender @some : @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                PAIR;       # pair (pair @sender @some) @self : mutez : @some : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                CONS;       # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }
              {
                # == vote_callback ==
                # sp.verify(self.data.state == 1, 'INCORRECT_STATE') # @parameter%vote_callback : @storage
                PUSH nat 1; # nat : @parameter%vote_callback : @storage
                DUP 3;      # @storage : nat : @parameter%vote_callback : @storage
                GET 3;      # pair (nat %state) (address %token_address) : nat : @parameter%vote_callback : @storage
                CAR;        # nat : nat : @parameter%vote_callback : @storage
                COMPARE;    # int : @parameter%vote_callback : @storage
                EQ;         # bool : @parameter%vote_callback : @storage
                IF
                  {}
                  {
                    PUSH string "INCORRECT_STATE"; # string : @parameter%vote_callback : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote_callback : @storage
                SWAP;       # @storage : @parameter%vote_callback
                # sp.verify(self.data.voting_buffer.is_some(), 'VOTING_BUFFER_EMPTY') # @storage : @parameter%vote_callback
                DUP;        # @storage : @storage : @parameter%vote_callback
                DUG 2;      # @storage : @parameter%vote_callback : @storage
                GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : @parameter%vote_callback : @storage
                IF_NONE
                  {
                    PUSH string "VOTING_BUFFER_EMPTY"; # string : @parameter%vote_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {
                    DROP;       # @parameter%vote_callback : @storage
                  }; # @parameter%vote_callback : @storage
                # sp.verify(params > 0, 'INVALID_VOTE') # @parameter%vote_callback : @storage
                DUP;        # @parameter%vote_callback : @parameter%vote_callback : @storage
                PUSH nat 0; # nat : @parameter%vote_callback : @parameter%vote_callback : @storage
                COMPARE;    # int : @parameter%vote_callback : @storage
                LT;         # bool : @parameter%vote_callback : @storage
                IF
                  {}
                  {
                    PUSH string "INVALID_VOTE"; # string : @parameter%vote_callback : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote_callback : @storage
                SWAP;       # @storage : @parameter%vote_callback
                # sp.verify(sp.sender == self.data.token_address, 'NOT_ALLOWED') # @storage : @parameter%vote_callback
                DUP;        # @storage : @storage : @parameter%vote_callback
                DUG 2;      # @storage : @parameter%vote_callback : @storage
                GET 3;      # pair (nat %state) (address %token_address) : @parameter%vote_callback : @storage
                CDR;        # address : @parameter%vote_callback : @storage
                SENDER;     # @sender : address : @parameter%vote_callback : @storage
                COMPARE;    # int : @parameter%vote_callback : @storage
                EQ;         # bool : @parameter%vote_callback : @storage
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : @parameter%vote_callback : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%vote_callback : @storage
                SWAP;       # @storage : @parameter%vote_callback
                # self.data.voters[(self.data.voting_buffer.open_some().sender, self.data.voting_buffer.open_some().proposal_id)] = sp.record(votes = params, value = self.data.voting_buffer.open_some().vote_value) # @storage : @parameter%vote_callback
                DUP;        # @storage : @storage : @parameter%vote_callback
                DUG 2;      # @storage : @parameter%vote_callback : @storage
                DUP;        # @storage : @storage : @parameter%vote_callback : @storage
                GET 7;      # big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                DUP 4;      # @storage : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                IF_NONE
                  {
                    PUSH int 287; # int : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                GET 4;      # nat : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                DUP 4;      # @parameter%vote_callback : nat : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                PAIR;       # pair @parameter%vote_callback nat : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                SOME;       # option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                DUP 5;      # @storage : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                IF_NONE
                  {
                    PUSH int 287; # int : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                GET 3;      # nat : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback : @storage
                DIG 5;      # @storage : nat : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback
                GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : nat : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback
                IF_NONE
                  {
                    PUSH int 287; # int : nat : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback
                CAR;        # address : nat : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback
                PAIR;       # pair address nat : option (pair @parameter%vote_callback nat) : big_map (pair address nat) (pair (nat %votes) (nat %value)) : @storage : @parameter%vote_callback
                UPDATE;     # big_map (pair address nat) (pair nat nat) : @storage : @parameter%vote_callback
                UPDATE 7;   # @storage : @parameter%vote_callback
                SWAP;       # @parameter%vote_callback : @storage
                # if self.data.voting_buffer.open_some().vote_value == 0: # @parameter%vote_callback : @storage
                PUSH nat 0; # nat : @parameter%vote_callback : @storage
                DUP 3;      # @storage : nat : @parameter%vote_callback : @storage
                GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : nat : @parameter%vote_callback : @storage
                IF_NONE
                  {
                    PUSH int 287; # int : nat : @parameter%vote_callback : @storage
                    FAILWITH;   # FAILED
                  }
                  {}; # @some : nat : @parameter%vote_callback : @storage
                GET 4;      # nat : nat : @parameter%vote_callback : @storage
                COMPARE;    # int : @parameter%vote_callback : @storage
                EQ;         # bool : @parameter%vote_callback : @storage
                IF
                  {
                    SWAP;       # @storage : @parameter%vote_callback
                    # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].up_votes += params # @storage : @parameter%vote_callback
                    DUP;        # @storage : @storage : @parameter%vote_callback
                    DUG 2;      # @storage : @parameter%vote_callback : @storage
                    UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                    UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                    SWAP;       # pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                    UNPAIR;     # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                    SWAP;       # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                    DUP;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                    DIG 6;      # @storage : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    IF_NONE
                      {
                        PUSH int 287; # int : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    GET 3;      # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    DUP;        # nat : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    DUG 2;      # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    IF_NONE
                      {
                        PUSH int 298; # int : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    DUP;        # @some : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    CAR;        # nat : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                    DIG 7;      # @parameter%vote_callback : nat : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    ADD;        # nat : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    UPDATE 1;   # @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    SOME;       # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    SWAP;       # nat : option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    UPDATE;     # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    SWAP;       # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    PAIR;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                    PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                  }
                  {
                    # if self.data.voting_buffer.open_some().vote_value == 1: # @parameter%vote_callback : @storage
                    PUSH nat 1; # nat : @parameter%vote_callback : @storage
                    DUP 3;      # @storage : nat : @parameter%vote_callback : @storage
                    GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : nat : @parameter%vote_callback : @storage
                    IF_NONE
                      {
                        PUSH int 287; # int : nat : @parameter%vote_callback : @storage
                        FAILWITH;   # FAILED
                      }
                      {}; # @some : nat : @parameter%vote_callback : @storage
                    GET 4;      # nat : nat : @parameter%vote_callback : @storage
                    COMPARE;    # int : @parameter%vote_callback : @storage
                    EQ;         # bool : @parameter%vote_callback : @storage
                    IF
                      {
                        SWAP;       # @storage : @parameter%vote_callback
                        # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].down_votes += params # @storage : @parameter%vote_callback
                        DUP;        # @storage : @storage : @parameter%vote_callback
                        DUG 2;      # @storage : @parameter%vote_callback : @storage
                        UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                        UNPAIR;     # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                        SWAP;       # pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                        UNPAIR;     # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                        SWAP;       # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                        DUP;        # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback : @storage
                        DIG 6;      # @storage : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        GET 8;      # option (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        IF_NONE
                          {
                            PUSH int 287; # int : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        GET 3;      # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        DUP;        # nat : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        DUG 2;      # nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        GET;        # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        IF_NONE
                          {
                            PUSH int 301; # int : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                            FAILWITH;   # FAILED
                          }
                          {}; # @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        DUP;        # @some : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        GET 3;      # nat : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : @parameter%vote_callback
                        DIG 7;      # @parameter%vote_callback : nat : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        ADD;        # nat : @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        UPDATE 3;   # @some : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        SOME;       # option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : nat : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        SWAP;       # nat : option (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        UPDATE;     # big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        SWAP;       # option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation)))) : big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        PAIR;       # pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        SWAP;       # pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes) : pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        PAIR;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                        PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                      }
                      {
                        PUSH string "INVALID_VOTE_VALUE"; # string : @parameter%vote_callback : @storage
                        FAILWITH;   # FAILED
                      }; # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                  }; # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                # self.data.state = 0 # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                UNPAIR;     # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                SWAP;       # pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                UNPAIR;     # pair (nat %state) (address %token_address) : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                CDR;        # address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                PUSH nat 0; # nat : address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                PAIR;       # pair nat address : pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                PAIR;       # pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))) : pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))
                SWAP;       # pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))) : pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))
                PAIR;       # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                # self.data.voting_buffer = sp.none # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                NONE (pair address (pair nat nat)); # option (pair address (pair nat nat)) : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                UPDATE 8;   # pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
                NIL operation; # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
              }; # list operation : pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status)))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
          }; # list operation : pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
      }; # list operation : pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
    NIL operation; # list operation : list operation : pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
    SWAP;       # list operation : list operation : pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
      }; # list operation : pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))))
    PAIR;       # pair (list operation) (pair (pair (pair (pair (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) (pair (pair nat address) (pair (nat %uuid) (pair (big_map %voters (pair address nat) (pair (nat %votes) (nat %value))) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value))))))))
  };