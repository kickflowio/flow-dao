parameter (or (or (nat %end_voting) (or (nat %execute_proposal) (pair %register_proposal (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (or (or (nat %register_proposal_callback) (pair %set_governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold))))) (or (pair %vote (nat %proposal_id) (nat %vote_value)) (nat %vote_callback))));
storage   (pair (pair (pair (pair %governance_parameters (int %voting_period) (pair (int %timelock_period) (pair (nat %quorum_votes) (nat %proposal_threshold)))) (big_map %metadata string bytes)) (pair (option %proposal_buffer (pair (address %sender) (pair (string %proposal_metadata) (lambda %proposal_lambda unit (list operation))))) (big_map %proposals nat (pair (nat %up_votes) (pair (nat %down_votes) (pair (map %voters address (pair (nat %value) (nat %votes))) (pair (string %proposal_metadata) (pair (lambda %proposal_lambda unit (list operation)) (pair (pair %proposal_timelock (timestamp %ending) (bool %activated)) (pair (timestamp %voting_end) (pair (address %creator) (pair (nat %origin_level) (nat %status))))))))))))) (pair (pair (nat %state) (address %token_address)) (pair (nat %uuid) (option %voting_buffer (pair (address %sender) (pair (nat %proposal_id) (nat %vote_value)))))));
code
  {
    CAST (pair (or (or nat (or nat (pair string (lambda unit (list operation))))) (or (or nat (pair int (pair int (pair nat nat)))) (or (pair nat nat) nat))) (pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))))); # pair (or (or nat (or nat (pair string (lambda unit (list operation))))) (or (or nat (pair int (pair int (pair nat nat)))) (or (pair nat nat) nat))) (pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))))
    UNPAIR;     # or (or nat (or nat (pair string (lambda unit (list operation))))) (or (or nat (pair int (pair int (pair nat nat)))) (or (pair nat nat) nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            # == end_voting ==
            # sp.verify(self.data.proposals.contains(params), 'INVALID_PROPOSAL_ID') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            SWAP;       # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            MEM;        # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF
              {}
              {
                PUSH string "INVALID_PROPOSAL_ID"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            # sp.verify(sp.now > self.data.proposals[params].voting_end, 'VOTING_ONGOING') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            SWAP;       # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF_SOME
              {
                # of_some: Get-item:205 # @some : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                PUSH int 205; # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # @some : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 13;     # timestamp : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            NOW;        # @now : timestamp : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GT;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF
              {}
              {
                PUSH string "VOTING_ONGOING"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            # sp.verify(self.data.proposals[params].status == 0, 'VOTING_ALREADY_ENDED') # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            PUSH nat 0; # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUP 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF_SOME
              {
                # of_some: Get-item:205 # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                PUSH int 205; # int : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 18;     # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF
              {}
              {
                PUSH string "VOTING_ALREADY_ENDED"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            # if (self.data.proposals[params].up_votes > self.data.proposals[params].down_votes) & ((self.data.proposals[params].up_votes + self.data.proposals[params].down_votes) >= self.data.governance_parameters.quorum_votes): # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
            DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            SWAP;       # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF_SOME
              {
                # of_some: Get-item:205 # @some : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                PUSH int 205; # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # @some : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 3;      # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            DUP 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF_SOME
              {
                # of_some: Get-item:205 # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                PUSH int 205; # int : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                FAILWITH;   # FAILED
              }; # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            CAR;        # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            GT;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF
              {
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                CAR;        # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                CAR;        # pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                GET 5;      # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat
                DUG 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:205 # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 205; # int : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 4;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 4;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:205 # @some : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 205; # int : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                ADD;        # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GE;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                PUSH bool False; # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }; # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            IF
              {
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # self.data.proposals[params].proposal_timelock.activated = True # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DUP 6;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                IF_SOME
                  {}
                  {
                    PUSH int 218; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    FAILWITH;   # FAILED
                  }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DUP;        # @some : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                GET 11;     # pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                PUSH bool True; # bool : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE 2;   # pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE 11;  # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # self.data.proposals[params].proposal_timelock.ending = sp.add_seconds(sp.now, self.data.governance_parameters.timelock_period) # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 6;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 219; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # @some : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 11;     # pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NOW;        # @now : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DIG 9;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : @now : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : @now : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                CAR;        # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : @now : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                CAR;        # pair int (pair int (pair nat nat)) : @now : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                GET 3;      # int : @now : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                ADD;        # timestamp : pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE 1;   # pair timestamp bool : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE 11;  # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                # self.data.proposals[params].status = 1 # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DIG 5;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                IF_SOME
                  {}
                  {
                    PUSH int 224; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PUSH nat 1; # nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                UPDATE 18;  # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # self.data.proposals[params].status = 3 # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                DIG 5;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                IF_SOME
                  {}
                  {
                    PUSH int 227; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PUSH nat 3; # nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                UPDATE 18;  # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }; # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            NIL operation; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # == execute_proposal ==
                # sp.verify(self.data.proposals.contains(params), 'INVALID_PROPOSAL_ID') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                MEM;        # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "INVALID_PROPOSAL_ID"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # sp.verify(self.data.proposals[params].status == 1, 'TIMELOCK_INACTIVE') # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 1; # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:318 # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 318; # int : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 18;     # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "TIMELOCK_INACTIVE"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # sp.verify(sp.now > self.data.proposals[params].proposal_timelock.ending, 'EXECUTING_TOO_SOON') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:318 # @some : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 318; # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 11;     # pair timestamp bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # timestamp : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NOW;        # @now : timestamp : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GT;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "EXECUTING_TOO_SOON"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # for op in self.data.proposals[params].proposal_lambda(sp.unit): ... # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NIL operation; # list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:318 # @some : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 318; # int : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 9;      # lambda unit (list operation) : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNIT;       # unit : lambda unit (list operation) : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EXEC;       # list operation : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                ITER
                  {
                    # sp.operations().push(op) # operation : list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    CONS;       # list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }; # list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # self.data.proposals[params].status = 2 # list operation : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DIG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : list operation : nat
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation : nat
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation : nat
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation : nat
                UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation : nat
                SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation : nat
                DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation : nat
                DIG 6;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                IF_SOME
                  {}
                  {
                    PUSH int 330; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                    FAILWITH;   # FAILED
                  }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                PUSH nat 2; # nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                UPDATE 18;  # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : list operation
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : list operation
                SWAP;       # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair string (lambda unit (list operation))
                # == register_proposal ==
                # self.data.proposal_buffer = sp.some(sp.record(sender = sp.sender, proposal_metadata = params.proposal_metadata, proposal_lambda = params.proposal_lambda)) # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair string (lambda unit (list operation))
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair string (lambda unit (list operation))
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair string (lambda unit (list operation))
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair string (lambda unit (list operation))
                CDR;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair string (lambda unit (list operation))
                DIG 3;      # pair string (lambda unit (list operation)) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                UNPAIR;     # string : lambda unit (list operation) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SENDER;     # @sender : string : lambda unit (list operation) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR 3;     # pair @sender (pair string (lambda unit (list operation))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SOME;       # option (pair @sender (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                # self.data.state = 1 # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                UNPAIR;     # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                CDR;        # address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PUSH nat 1; # nat : address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PAIR;       # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PAIR;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                SWAP;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # sp.transfer((sp.record(address = sp.sender, level = sp.as_nat(sp.level - 1)), sp.self_entry_point('register_proposal_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TRecord(address = sp.TAddress, level = sp.TNat).layout(("address", "level")), sp.TContract(sp.TNat)), self.data.token_address, entry_point='getBalanceAt').open_some()) # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # pair nat address : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CDR;        # address : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CONTRACT %getBalanceAt (pair (pair address nat) (contract nat)); # option (contract (pair (pair address nat) (contract nat))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 141; # int : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NIL operation; # list operation : @some : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH mutez 0; # mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SELF %register_proposal_callback; # @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 1; # nat : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                LEVEL;      # @level : nat : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SUB;        # int : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                ISNAT;      # option nat : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 153; # int : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SENDER;     # @sender : @some : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PAIR;       # pair @sender @some : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PAIR;       # pair (pair @sender @some) @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CONS;       # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair @sender (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
          }; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                # == register_proposal_callback ==
                # sp.verify(self.data.state == 1, 'INCORRECT_STATE') # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 1; # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # pair nat address : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "INCORRECT_STATE"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # sp.verify(self.data.proposal_buffer.is_some(), 'PROPOSAL_BUFFER_EMPTY') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # option (pair address (pair string (lambda unit (list operation)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    DROP;       # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH string "PROPOSAL_BUFFER_EMPTY"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # sp.verify(params >= self.data.governance_parameters.proposal_threshold, 'NOT_ENOUGH_TOKENS') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair int (pair int (pair nat nat)) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 6;      # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GE;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "NOT_ENOUGH_TOKENS"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # sp.verify(sp.sender == self.data.token_address, 'NOT_ALLOWED') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # pair nat address : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CDR;        # address : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SENDER;     # @sender : address : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # self.data.uuid += 1 # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                GET 5;      # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                PUSH nat 1; # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                ADD;        # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                UPDATE 5;   # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # self.data.proposals[self.data.uuid] = sp.record(up_votes = 0, down_votes = 0, voters = {}, proposal_metadata = self.data.proposal_buffer.open_some().proposal_metadata, proposal_lambda = self.data.proposal_buffer.open_some().proposal_lambda, proposal_timelock = sp.record(ending = sp.timestamp(0), activated = False), voting_end = sp.add_seconds(sp.now, self.data.governance_parameters.voting_period), creator = self.data.proposal_buffer.open_some().sender, origin_level = sp.level, status = 0) # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 0; # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                LEVEL;      # @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 8;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # option (pair address (pair string (lambda unit (list operation)))) : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 175; # int : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NOW;        # @now : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 10;     # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : @now : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : @now : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : @now : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair int (pair int (pair nat nat)) : @now : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # int : @now : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                ADD;        # timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH (pair timestamp bool) (Pair "1970-01-01T00:00:00Z" False); # pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 11;     # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # option (pair address (pair string (lambda unit (list operation)))) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 175; # int : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 12;     # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # option (pair address (pair string (lambda unit (list operation)))) : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 175; # int : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # string : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EMPTY_MAP address (pair nat nat); # map address (pair nat nat) : string : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 0; # nat : map address (pair nat nat) : string : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # nat : nat : map address (pair nat nat) : string : lambda unit (list operation) : pair timestamp bool : timestamp : address : @level : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PAIR 10;    # pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat)))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DIG 5;      # nat : pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat)))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DROP;       # pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat)))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DIG 5;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                GET 5;      # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair @level nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                # self.data.state = 0 # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                UNPAIR;     # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                CDR;        # address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PUSH nat 0; # nat : address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PAIR;       # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PAIR;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                SWAP;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                # self.data.proposal_buffer = sp.none # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                CDR;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                NONE (pair address (pair string (lambda unit (list operation)))); # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                # == set_governance_parameters ==
                # sp.verify(sp.sender == sp.self_address, 'NOT_ALLOWED') # pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SELF_ADDRESS; # @self : pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SENDER;     # @sender : @self : pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # pair int (pair int (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair int (pair int (pair nat nat))
                # self.data.governance_parameters = params # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair int (pair int (pair nat nat))
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair int (pair int (pair nat nat))
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair int (pair int (pair nat nat))
                CDR;        # big_map string bytes : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair int (pair int (pair nat nat))
                DIG 3;      # pair int (pair int (pair nat nat)) : big_map string bytes : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }; # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
            NIL operation; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
          }
          {
            IF_LEFT
              {
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                # == vote ==
                # sp.verify(self.data.proposals.contains(params.proposal_id), 'INVALID_PROPOSAL_ID') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # pair nat nat : pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                MEM;        # bool : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "INVALID_PROPOSAL_ID"; # string : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # sp.verify(self.data.proposals[params.proposal_id].status == 0, 'VOTING_ALREADY_ENDED') # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 0; # nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:239 # @some : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 239; # int : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 18;     # nat : nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "VOTING_ALREADY_ENDED"; # string : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                # sp.verify(sp.now < self.data.proposals[params.proposal_id].voting_end, 'VOTING_ALREADY_ENDED') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # pair nat nat : pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:239 # @some : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 239; # int : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 13;     # timestamp : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NOW;        # @now : timestamp : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                LT;         # bool : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "VOTING_ALREADY_ENDED"; # string : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                # sp.verify(~ (self.data.proposals[params.proposal_id].voters.contains(sp.sender)), 'ALREADY_VOTED') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # pair nat nat : pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:239 # @some : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 239; # int : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 5;      # map address (pair nat nat) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SENDER;     # @sender : map address (pair nat nat) : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                MEM;        # bool : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {
                    PUSH string "ALREADY_VOTED"; # string : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }
                  {}; # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # self.data.voting_buffer = sp.some(sp.record(sender = sp.sender, proposal_id = params.proposal_id, vote_value = params.vote_value)) # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # pair nat nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CDR;        # nat : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair nat nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # pair nat nat : pair nat nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 3;      # pair nat nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                CAR;        # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                SENDER;     # @sender : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                PAIR 3;     # pair @sender (pair nat nat) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                SOME;       # option (pair @sender (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                UPDATE 6;   # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                # self.data.state = 1 # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair nat nat
                SWAP;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat
                UNPAIR;     # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat
                CDR;        # address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat
                PUSH nat 1; # nat : address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat
                PAIR;       # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat
                PAIR;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair nat nat
                SWAP;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair nat nat
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair nat nat
                SWAP;       # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # sp.transfer((sp.record(address = sp.sender, level = self.data.proposals[params.proposal_id].origin_level), sp.self_entry_point('vote_callback')), sp.tez(0), sp.contract(sp.TPair(sp.TRecord(address = sp.TAddress, level = sp.TNat).layout(("address", "level")), sp.TContract(sp.TNat)), self.data.token_address, entry_point='getBalanceAt').open_some()) # pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NIL operation; # list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # pair nat address : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CDR;        # address : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CONTRACT %getBalanceAt (pair (pair address nat) (contract nat)); # option (contract (pair (pair address nat) (contract nat))) : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 257; # int : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH mutez 0; # mutez : @some : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SELF %vote_callback; # @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 6;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : @self : mutez : @some : list operation : pair nat nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DIG 5;      # pair nat nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    # of_some: Get-item:239 # @some : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH int 239; # int : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 17;     # nat : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SENDER;     # @sender : nat : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PAIR;       # pair @sender nat : @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PAIR;       # pair (pair @sender nat) @self : mutez : @some : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                TRANSFER_TOKENS; # operation : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CONS;       # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }
              {
                # == vote_callback ==
                # sp.verify(self.data.state == 1, 'INCORRECT_STATE') # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 1; # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # pair nat address : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CAR;        # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "INCORRECT_STATE"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # sp.verify(self.data.voting_buffer.is_some(), 'VOTING_BUFFER_EMPTY') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 6;      # option (pair address (pair nat nat)) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {
                    DROP;       # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    PUSH string "VOTING_BUFFER_EMPTY"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # sp.verify(params > 0, 'INVALID_VOTE') # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 0; # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                LT;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "INVALID_VOTE"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # sp.verify(sp.sender == self.data.token_address, 'NOT_ALLOWED') # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # pair nat address : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                CDR;        # address : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SENDER;     # @sender : address : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {}
                  {
                    PUSH string "NOT_ALLOWED"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].voters[self.data.voting_buffer.open_some().sender] = sp.record(value = self.data.voting_buffer.open_some().vote_value, votes = params) # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 7;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 6;      # option (pair address (pair nat nat)) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 288; # int : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 293; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP;        # @some : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 5;      # map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 8;      # nat : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 10;     # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 6;      # option (pair address (pair nat nat)) : nat : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 288; # int : nat : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # nat : nat : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PAIR;       # pair nat nat : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                SOME;       # option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DIG 9;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                GET 6;      # option (pair address (pair nat nat)) : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                IF_SOME
                  {}
                  {
                    PUSH int 288; # int : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    FAILWITH;   # FAILED
                  }; # @some : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                CAR;        # address : option (pair nat nat) : map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE;     # map address (pair nat nat) : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE 5;   # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                SWAP;       # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # if self.data.voting_buffer.open_some().vote_value == 0: # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                PUSH nat 0; # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 6;      # option (pair address (pair nat nat)) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF_SOME
                  {}
                  {
                    PUSH int 288; # int : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    FAILWITH;   # FAILED
                  }; # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                GET 4;      # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                IF
                  {
                    SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                    # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].up_votes += params # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                    DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                    DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    DIG 6;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    GET 6;      # option (pair address (pair nat nat)) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    IF_SOME
                      {}
                      {
                        PUSH int 288; # int : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        FAILWITH;   # FAILED
                      }; # @some : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    GET 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    IF_SOME
                      {}
                      {
                        PUSH int 299; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        FAILWITH;   # FAILED
                      }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    DUP;        # @some : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    CAR;        # nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                    DIG 7;      # nat : nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    ADD;        # nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    UPDATE 1;   # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                    PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }
                  {
                    # if self.data.voting_buffer.open_some().vote_value == 1: # nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    PUSH nat 1; # nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    DUP 3;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    GET 6;      # option (pair address (pair nat nat)) : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    IF_SOME
                      {}
                      {
                        PUSH int 288; # int : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }; # @some : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    GET 4;      # nat : nat : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    COMPARE;    # int : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    EQ;         # bool : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                    IF
                      {
                        SWAP;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                        # self.data.proposals[self.data.voting_buffer.open_some().proposal_id].down_votes += params # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                        DUP;        # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat
                        DUG 2;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        UNPAIR;     # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        SWAP;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        UNPAIR;     # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        SWAP;       # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        DUP;        # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        DIG 6;      # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        GET 6;      # option (pair address (pair nat nat)) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        IF_SOME
                          {}
                          {
                            PUSH int 288; # int : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                            FAILWITH;   # FAILED
                          }; # @some : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        GET 3;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        DUP;        # nat : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        DUG 2;      # nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        GET;        # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        IF_SOME
                          {}
                          {
                            PUSH int 302; # int : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                            FAILWITH;   # FAILED
                          }; # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        DUP;        # @some : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        GET 3;      # nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : nat
                        DIG 7;      # nat : nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        ADD;        # nat : @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        UPDATE 3;   # @some : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        SOME;       # option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : nat : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        SWAP;       # nat : option (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        UPDATE;     # big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : option (pair address (pair string (lambda unit (list operation)))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        SWAP;       # option (pair address (pair string (lambda unit (list operation)))) : big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        PAIR;       # pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        SWAP;       # pair (pair int (pair int (pair nat nat))) (big_map string bytes) : pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        PAIR;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                        PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                      }
                      {
                        PUSH string "INVALID_VOTE_VALUE"; # string : nat : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                        FAILWITH;   # FAILED
                      }; # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                  }; # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # self.data.state = 0 # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UNPAIR;     # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                SWAP;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                UNPAIR;     # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                CDR;        # address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PUSH nat 0; # nat : address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PAIR;       # pair nat address : pair nat (option (pair address (pair nat nat))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                PAIR;       # pair (pair nat address) (pair nat (option (pair address (pair nat nat)))) : pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))
                SWAP;       # pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat))))))))))) : pair (pair nat address) (pair nat (option (pair address (pair nat nat))))
                PAIR;       # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                # self.data.voting_buffer = sp.none # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NONE (pair address (pair nat nat)); # option (pair address (pair nat nat)) : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                UPDATE 6;   # pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
                NIL operation; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
              }; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
          }; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
      }; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
    NIL operation; # list operation : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
    SWAP;       # list operation : list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
    ITER
      {
        CONS;       # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
      }; # list operation : pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat)))))
    PAIR;       # pair (list operation) (pair (pair (pair (pair int (pair int (pair nat nat))) (big_map string bytes)) (pair (option (pair address (pair string (lambda unit (list operation))))) (big_map nat (pair nat (pair nat (pair (map address (pair nat nat)) (pair string (pair (lambda unit (list operation)) (pair (pair timestamp bool) (pair timestamp (pair address (pair nat nat)))))))))))) (pair (pair nat address) (pair nat (option (pair address (pair nat nat))))))
  };